function [ frames,proj_geom ] = Radon3D( volume,...
    data)
% RADON3D Creates a Stack of frames/projections by linear integration over
%'volume' according to the projection 'parameters'
%
% volume              - 3D volume / Tomographic Reconstruction - can be
%                       complex
% parameters          - Matrix with projection parameters for all
%                       projections, in the form [Theta, u, v, alpha, beta]
%                       (:,1) - projection angles (degrees)
%                       (:,2) - horizontal granslations (Pixels)
%                       (:,3) - vertical translations (Pixels)
%                       (:,4) - alpha (Degrees)
%                       (:,5) - beta (Degrees)
% data.sp             - Frame Size= probe array size
% data.max_memory     - Maximum available memory in GPU
% frames              - 3D matrix with stack of frames
% proj_geom           - Structure array with 3D parallel beam geometry (see
%                       ASTRA's toolbox documentation)
%
% This file is part of 3DPtychoTomo, which is released under the
% BSD 3-Clause License. Please see LICENSE.txt
% Tiago Ramos (tiagoj@dtu.dk) May-2018

% Input variables initialization
if ~isfield(data,'max_memory')
    max_memory=1;
else
    max_memory=data.max_memory;
end
if size(data.parameters,2)<5
    aux=zeros(size(data.parameters,1),5);
    aux(:,1:size(data.parameters,2))=data.parameters;
    data.parameters=aux;
end

sp=data.sp;
parameters=data.parameters;


%Create volume Geometry
[~,N,M]=size(volume);
vol_geom=astra_create_vol_geom(N,N,M);

proj_geom=astra_create_proj_geom('parallel3d',1,1,sp(1),...
    sp(2),parameters(:,1)*pi/180);
proj_geom=astra_geom_2vec(proj_geom);

proj_geom.DetectorRowCount=sp(1);
proj_geom.DetectorColCount=sp(2);
if size(parameters,2)<=3 || sum(sum(parameters(4:end,1:end)))==0
	proj_geom.Vectors(:,1)=sind(parameters(:,1));                     %rayX
	proj_geom.Vectors(:,2)=-cosd(parameters(:,1));                    %rayY
	proj_geom.Vectors(:,3)=0;                                         %rayZ
	proj_geom.Vectors(:,4)=(parameters(:,2)).*cosd(parameters(:,1));    %dX
	proj_geom.Vectors(:,5)=(parameters(:,2)).*sind(parameters(:,1));    %dY
	proj_geom.Vectors(:,6)=(parameters(:,3));                           %dZ
	proj_geom.Vectors(:,7)=cosd(parameters(:,1));                       %uX
	proj_geom.Vectors(:,8)=sind(parameters(:,1));                       %uY
	proj_geom.Vectors(:,9)=0;                                           %uZ
	proj_geom.Vectors(:,10)=0;                                          %vX
	proj_geom.Vectors(:,11)=0;                                          %vY
	proj_geom.Vectors(:,12)=1;                                          %vZ
else
	% Define 3D Transformation/rotation matrix
	for i=1:size(parameters,1)
		R=rotz(parameters(i,1))*rotx(parameters(i,4))*roty(parameters(i,5));
		u(i,:)=(R*[1 0 0]')';                     
		v(i,:)=(R*[0 0 1]')';   
	end                    
	proj_geom.Vectors(:,7:12)=[u v];   
	proj_geom.Vectors(:,4:5)=proj_geom.Vectors(:,7:8).*...
		[parameters(:,2) parameters(:,2)]; 
	proj_geom.Vectors(:,6)=proj_geom.Vectors(:,12).*parameters(:,3);
	proj_geom.Vectors(:,1:3)=cross(proj_geom.Vectors(:,7:9)',...
		proj_geom.Vectors(:,10:12)')';  
end

% Check for available memory and dvide projections in subsets if required
num_proj=size(parameters,1);
vol_memory=N*N*M*4/(1024^3);%number of voxels x 8bits x 2 (complex array)
req_memory=(sp(1)*sp(2)*size(parameters,1)+N*N*M)*4/(1024^3);%In Gbytes (double precision)
if req_memory<max_memory    
    [~,frames_r]=astra_create_sino3d_cuda(real(volume),proj_geom,vol_geom);
    [~,frames_i]=astra_create_sino3d_cuda(imag(volume),proj_geom,vol_geom);
    frames=frames_r+1i.*frames_i;
else
    
% If the available GPU memory is not sufficient to generate all
% projections at once, the function automatically generates smaller
% stacks of proejctions that are merged into a single array later.
frames=zeros(sp(2),num_proj,sp(1));
div=ceil((req_memory-vol_memory)/(max_memory-vol_memory));
if div<0, div=4;end
n_partial_proj=ceil(num_proj/div);
indexes=1:n_partial_proj;
ir=isreal(volume);
for k=1:div
    proj_geom_k=proj_geom;
    proj_geom_k.Vectors=proj_geom_k.Vectors(indexes,:);
    [~,aux_r]=astra_create_sino3d_cuda(real(volume),proj_geom_k,vol_geom);
    if ir==0
        [~,aux_i]=astra_create_sino3d_cuda(imag(volume),proj_geom_k,vol_geom);
        frames(:,indexes,:)=aux_r+1i.*aux_i;
    else
        frames(:,indexes,:)=aux_r;
    end
    indexes=indexes+n_partial_proj;
    indexes(indexes>num_proj)=[];
    astra_mex_data3d('clear');
end
    
end
    astra_mex_data3d('clear');
    frames=permute(frames,[3 1 2]);
end